package edu.cs3500.spreadsheets.model;

import edu.cs3500.spreadsheets.model.Enums.OperationType;
import edu.cs3500.spreadsheets.provider.model.ISpreadsheetModel;
import edu.cs3500.spreadsheets.provider.model.ISpreadsheetViewOnly;
import edu.cs3500.spreadsheets.sexp.IdentifyInput;
import edu.cs3500.spreadsheets.sexp.Parser;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Represent a RegularWorksheet.
 */
public class RegularWorksheet implements Worksheet, GetOnlyModel,
        ISpreadsheetModel, ISpreadsheetViewOnly {

  private HashMap<Coord, SingleCell> worksheetData;
  private int maxRow;
  private int maxCol;

  /**
   * Creates a blank worksheet or a new Worksheet.
   */
  public RegularWorksheet() {
    this.worksheetData = new HashMap<>();
    this.maxRow = 0;
    this.maxCol = 0;
  }

  /**
   * Gets the String representation of the Cell at the coord.
   * @param coord   Coord of cell.
   * @return        String rep of cell at coord.
   */
  public String getInputOfCell(Coord coord) {
    SingleCell cell = this.worksheetData.get(coord);
    if (cell == null) {
      return "";
    }
    else {
      return cell.inputForm();
    }
  }

  /**
   * Assigns SingleCells to coordinates in the Worksheet.
   * @param coord Where the cell data will be placed in the map.
   * @param cellData The data that will be placed in the hashmap.
   */
  public void assignCoord(Coord coord, SingleCell cellData) {
    this.worksheetData.put(coord, cellData);
    if (coord.col > maxCol) {
      this.maxCol = coord.col;
    }
    if (coord.row > maxRow) {
      this.maxRow = coord.row;
    }
  }

  /**
   * Removes the cell at the given coord.
   * @param coord   Coord to delete.
   */
  @Override
  public void removeCell(Coord coord) {
    this.worksheetData.remove(coord);
  }

  /**
   * Changes the cell at the given coord to the new SingleCell.
   * @param coord   Coord to change.
   * @param newData New SingleCell to update to.
   */
  @Override
  public void changeCell(Coord coord, SingleCell newData) {
    this.removeCell(coord);
    this.assignCoord(coord, newData);
  }

  /**
   * Gets the formula used at a certain cell.
   *
   * @param coord coordinate of cell
   * @return String of the Formula
   */
  @Override
  public String getFormulaAtCoord(Coord coord) {
    return getInputOfCell(coord);
  }

  /**
   * Evaluates the cell to return the cell value.
   * @param coord The coordinate of the cell we want to evaluate.
   * @return the data of all the worksheetData needed.
   */
  public Object evaluateCell(Coord coord) {
    // If we have a cell at this coord
    if (this.worksheetData.containsKey(coord)) {
      HashSet<SingleCell> lookup = new HashSet<>();

      if (this.worksheetData.get(coord).hasCyclicReference(this.worksheetData, lookup)) {
        return "Error cycle";
      }

      // Evaluate it
      try {
        SingleCell cellData = this.worksheetData.get(coord);
        Object data = cellData.getValue(this.worksheetData, OperationType.STRING);
        return data;
      }
      catch (IllegalArgumentException | IllegalStateException ex) {
        return ex.getMessage();
      }
    }
    else {
      return "";
    }
  }

  /**
   * Deletes a cell from the spreadsheet. NOTE: May need more information from future assignments on
   * what it means to delete a cell. For now, we simply add a blank.
   *
   * @param coord coordinate of cell
   */
  @Override
  public void deleteCell(Coord coord) {
    removeCell(coord);
  }

  /**
   * Updates the value at a given cell.
   *
   * @param coord coordinate of cell
   * @param sexp  new sexp to be inputted at given cell
   */
  @Override
  public void updateCell(Coord coord, String sexp) {
    changeCell(coord, new Parser().parse(sexp).accept(new IdentifyInput()));
  }

  /**
   * Gets the list of error messages generated by this spreadsheet during creation of cells.
   *
   * @return list of error messages
   */
  @Override
  public List<String> errorMessages() {
    return null;
  }

  /**
   * Gets the list of occupied Coords in this spreadsheet.
   *
   * @return list of Coord.
   */
  @Override
  public List<Coord> getOccupiedCoords() {
    Set<Coord> set = worksheetData.keySet();
    return new ArrayList<>(set);
  }

  /**
   * Gets the number of columns to be displayed in the spreadsheet view.
   *
   * @return
   */
  @Override
  public int getCol() {
    return this.maxCol;
  }

  /**
   * Gets the number of rows to be displayed in the spreadsheet view.
   *
   * @return
   */
  @Override
  public int getRow() {
    return this.maxRow;
  }

  /**
   * Adds a blank column to the spreadsheet model.
   */
  @Override
  public void addCol() {
    this.maxCol = this.maxCol + 1;
  }

  /**
   * Adds a blank row to the spreadsheet model.
   */
  @Override
  public void addRow() {
    this.maxRow = this.maxRow + 1;
  }

  /**
   * This method will go through every assigned cell in the model and append the
   * cell as it would have been input to the model, to the appendable.
   * @return  The appendable.
   */
  @Override
  public Appendable getAllInputs() {
    StringBuilder build = new StringBuilder();
    Collection<SingleCell> set = this.worksheetData.values();

    for (SingleCell cell : set) {
      build.append(cell.inputForm());
      build.append("\n");
    }
    return build;
  }

  /**
   * Returns the hashmap of coordinates to SingelCells that the model stores.
   * @return  The hashmap.
   */
  @Override
  public HashMap<Coord, SingleCell> getData() {
    HashMap<Coord, SingleCell> map;
    map = (HashMap<Coord, SingleCell>) worksheetData.clone();
    return map;
  }


  /**
   * Returns the maximum row of all assigned cells.
   * @return maximum row of all assigned cells.
   */
  public int getMaxRow() {
    return this.maxRow;
  }

  /**
   * Returns the maximum column of all assigned cells.
   * @return maximum column of all assigned cells.
   */
  public int getMaxCol() {
    return this.maxCol;
  }

}
